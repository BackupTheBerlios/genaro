module Main where
import PrologAMidi
import Directory
import Progresiones
import PatronesRitmicos
import TraduceCifrados
import HaskoreAMidi
import CAHaskell
import PrologAHaskell
import qualified BiblioGenaro
import Ratio	--para ejemplo
import Basics	--para mainDtPatNum, q deberia ir en otro lado las cosas q hace

rutaProgresionOrdenada :: String
rutaProgresionOrdenada = "./progresion_ordenada.txt"

rutaProgresion :: String
rutaProgresion = "./progresion.txt"

rutaPatronRitmico :: String
rutaPatronRitmico = "./PatronesRitmicos/patron_ritmico.txt"

rutaDestinoMidi :: String
rutaDestinoMidi = "./musica_genara.mid"

mainInteractivo :: IO()
mainInteractivo = do putStrLn "Introduce el directorio de trabajo"
                     dirTrabajo <- getLine
                     putStr (mensajeCambiaDir dirTrabajo)
                     BiblioGenaro.hazInteraccion interaccion
                     where mensajeCambiaDir = \dir -> "\n El directorio de trabajo es: " ++ dir ++ "\n"

interaccion :: BiblioGenaro.DatosInteraccion
interaccion = (introInteraccion, [(msjPatRitCYOrdHaskell,genPatRitCYOrdHaskell)])
        where introInteraccion = "\nBienvenido a Genaro, elija una de las opciones de generacion siguientes: "
              genPatRitCYOrdHaskell = Main.main
              msjPatRitCYOrdHaskell = "Generacion usando el patron ritmico de C y la ordenacion de las voces de Haskell"

progEjemplo :: Progresion
progEjemplo = [((I,Maj7),1%1),((V7 IV,Sept),1%1),((IV, Maj7),1%1),((V, Sept),1%1),((I,Mayor),1%1)]

patronEjemplo :: PatronRitmico
patronEjemplo = ( 4 , [ ([(1,100, True)],1%4), ([(1,100, True), (2,100, False)],1%4), ([(1,100, True), (3,100, False)],1%4), ([(1,100, False), (4,100, False)],1%4)] )

paramEjemplo :: ParametrosTraduceCifrados
paramEjemplo = Paralelo 4 0 1 4

mainDtPatNum :: String ->String -> Int -> IO()
mainDtPatNum dirTrabajo rutaPatronRitmico numRepeticiones = do putStr mensajeCambiaDir
                                                               setCurrentDirectory dirTrabajo
                                                               putStr "\n Procesando el archivo de progresion de acordes de Prolog\n"
                                                               progresion <- leeProgresion rutaProgresion
                                                               putStr ("\n Procesando el archivo de patron ritmico de C: " ++ rutaPatronRitmico ++ "\n")
                                                               (FPRC cols resolucion patronRitmico) <- leePatronRitmicoC rutaPatronRitmico
                                                               putStr "\n Generando el archivo midi\n"
                                                               haskoreAMidi (hazMusica progresion patronRitmico) rutaDestinoMidi
                                                               where  mensajeCambiaDir = "\n El directorio de trabajo es: " ++ dirTrabajo ++ "\n"
                                                                      progOrd =  traduceProgresion paramEjemplo
                                                                      hazMusicaFase1 prog patRit = deAcordesOrdenadosAMusica NoCiclico (Truncar1 , Truncar2) patRit (progOrd prog)
                                                                      hazMusica prog patRit = line (take numRepeticiones (repeat (hazMusicaFase1 prog patRit)))


mainDirTrabajo :: String -> IO()
mainDirTrabajo dirTrabajo = do putStr mensajeCambiaDir
                               setCurrentDirectory dirTrabajo
                               putStr "\n Procesando el archivo de progresion de acordes de Prolog\n"
                               progresion <- leeProgresion rutaProgresion
                               putStr "\n Procesando el archivo de patron ritmico de C\n"
                               (FPRC cols resolucion patronRitmico) <- leePatronRitmicoC rutaPatronRitmico
                               putStr "\n Generando el archivo midi\n"
                               haskoreAMidi (hazMusica progresion patronRitmico) rutaDestinoMidi
                               where  mensajeCambiaDir = "\n El directorio de trabajo es: " ++ dirTrabajo ++ "\n"
                                      progOrd =  traduceProgresion paramEjemplo
                                      hazMusica prog patRit = deAcordesOrdenadosAMusica NoCiclico (Truncar1 , Truncar2) patRit (progOrd prog)

main :: IO()
main = do putStr "\n Procesando el archivo de progresion de acordes de Prolog\n"
          progresion <- leeProgresion rutaProgresion
          putStr "\n Procesando el archivo de patron ritmico de C\n"
          (FPRC cols resolucion patronRitmico) <- leePatronRitmicoC rutaPatronRitmico
          putStr "\n Generando el archivo midi\n"
          haskoreAMidi (hazMusica progresion patronRitmico) rutaDestinoMidi
          where  progOrd =  traduceProgresion paramEjemplo
                 hazMusica prog patRit = deAcordesOrdenadosAMusica NoCiclico (Truncar1 , Truncar2) patRit (progOrd prog)
