module Main where
import PrologAMidi
import Directory
import Progresiones
import PatronesRitmicos
import TraduceCifrados
import HaskoreAMidi
import CAHaskell
import Ratio	--para ejemplo

rutaProgresionOrdenada :: String
rutaProgresionOrdenada = "./progresion_ordenada.txt"

rutaPatronRitmico :: String
rutaPatronRitmico = "./patron_ritmico.txt"

rutaDestinoMidi :: String
rutaDestinoMidi = "./musica_genara.mid"

main :: String -> IO()
main dirTrabajo = do putStr mensajeCambiaDir
                     setCurrentDirectory dirTrabajo
                     putStr "\n Empezando a generar midi a partir de Prolog\n"
                     progresionPrologAMidi2 rutaProgresionOrdenada rutaDestinoMidi
                     putStr "\n Terminado el proceso de generacion de musica\n"
                     where mensajeCambiaDir = "\n El directorio de trabajo es: " ++ dirTrabajo ++ "\n"

progEjemplo :: Progresion
progEjemplo = [((I,Maj7),1%1),((V7 IV,Sept),1%1),((IV, Maj7),1%1),((V, Sept),1%1),((I,Mayor),1%1)]

patronEjemplo :: PatronRitmico
patronEjemplo = ( 4 , [ ([(1,100, True)],1%4), ([(1,100, True), (2,100, False)],1%4), ([(1,100, True), (3,100, False)],1%4), ([(1,100, False), (4,100, False)],1%4)] )

paramEjemplo :: ParametrosTraduceCifrados
paramEjemplo = Paralelo 4 0 1 4


main2 :: String -> IO()
main2 dirTrabajo = do putStr mensajeCambiaDir
                      setCurrentDirectory dirTrabajo
                      putStr "\n Empezando a generar midi a partir de Prolog\n"
                      haskoreAMidi musica rutaDestinoMidi
                      where  mensajeCambiaDir = "\n El directorio de trabajo es: " ++ dirTrabajo ++ "\n"
                             traduccion = traduceProgresion paramEjemplo  progEjemplo
                             musica = deAcordesOrdenadosAMusica NoCiclico (Truncar1 , Truncar2) patronEjemplo traduccion

main3 :: String -> IO()
main3 dirTrabajo = do putStr mensajeCambiaDir
                      setCurrentDirectory dirTrabajo
                      --putStr "\n Empezando a generar midi a partir de Prolog\n"
                      putStr "\n Procesando el archivo de patron ritmico de C\n"
                      (FPRC cols resolucion patronRitmico) <- leePatronRitmicoC rutaPatronRitmico
                      putStr "\n Generando el archivo midi\n"
                      haskoreAMidi (hazMusica patronRitmico) rutaDestinoMidi
                      where  mensajeCambiaDir = "\n El directorio de trabajo es: " ++ dirTrabajo ++ "\n"
                             traduccion = traduceProgresion paramEjemplo  progEjemplo
                             hazMusica = \patRit -> (deAcordesOrdenadosAMusica NoCiclico (Truncar1 , Truncar2) patRit traduccion)

